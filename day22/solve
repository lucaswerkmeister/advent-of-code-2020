#!/usr/bin/env bash
function die {
    printf >&2 "%s: $1\n" "$0" "${@:2}"
    exit 1
}

{
    if ! IFS= read -r player_1_header; then
        die 'no header line for player 1'
    fi
    if [[ $player_1_header != 'Player 1:' ]]; then
        die 'unexpected header line for player 1: %s' "$player_1_header"
    fi
    while IFS= read -r player_1_card && [[ $player_1_card ]]; do
        player_1_cards+=("$player_1_card")
    done
    if ! IFS= read -r player_2_header; then
        die 'no header line for player 2'
    fi
    if [[ $player_2_header != 'Player 2:' ]]; then
        die 'unexpected header line for player 2: %s' "$player_2_header"
    fi
    while IFS= read -r player_2_card; do
        player_2_cards+=("$player_2_card")
    done
} < "${1:?input file not specified}"

original_player_1_cards=("${player_1_cards[@]}")
original_player_2_cards=("${player_2_cards[@]}")

# Play non-recursive Combat with the original_player_1_cards and original_player_2_cards,
# assigning the result to the winning_player_cards. (No output.)
# Returns true (0) if player 1 wins or false (1) if player 2 wins.
function play_nonrecursive_combat {
    local player_1_cards=("${original_player_1_cards[@]}")
    local player_2_cards=("${original_player_2_cards[@]}")

    while ((${#player_1_cards[@]} && ${#player_2_cards[@]})); do
        player_1_card=${player_1_cards[0]}
        player_2_card=${player_2_cards[0]}
        player_1_cards=("${player_1_cards[@]:1}")
        player_2_cards=("${player_2_cards[@]:1}")
        if ((player_1_card > player_2_card)); then
            player_1_cards+=("$player_1_card" "$player_2_card")
        else
            player_2_cards+=("$player_2_card" "$player_1_card")
        fi
    done
    if ((${#player_1_cards[@]})); then
        winning_player_cards=("${player_1_cards[@]}")
        return 0;
    else
        winning_player_cards=("${player_2_cards[@]}")
        return 1;
    fi
}

# Calculate and print the score of the winning_player_cards.
function winning_player_score {
    total_cards=${#winning_player_cards[@]}
    winning_player_score=0
    for ((i = 0; i < total_cards; i++)); do
        ((winning_player_score += winning_player_cards[i] * (total_cards - i)))
    done
    printf '%s\n' "$winning_player_score"
}

function part1 {
    play_nonrecursive_combat
    winning_player_score
}

game_number=1

# Play Recursive combat with the input_player_1_cards and input_player_2_cards,
# assigning the result to the winning_player_cards. (No standard output, log goes to standard error.)
# Returns true (0) if player 1 wins or false (1) if player 2 wins.
function play_recursive_combat {
    local player_1_cards=("${input_player_1_cards[@]}")
    local player_2_cards=("${input_player_2_cards[@]}")
    declare -A previous_rounds
    local current_game_number=$((game_number++))
    local round_number=1
    local current_round_number

    printf >&2 '=== Game %s ===\n\n' "$current_game_number"

    while ((${#player_1_cards[@]} && ${#player_2_cards[@]})); do
        current_round_number=$((round_number++))
        printf >&2 -- '-- Round %s (Game %s) --\n' "$current_round_number" "$current_game_number"
        printf >&2 'Player 1’s deck: %s' "${player_1_cards[0]}"; ((${#player_1_cards[@]} > 1)) && printf >&2 ', %s' "${player_1_cards[@]:1}"; printf >&2 '\n'
        printf >&2 'Player 2’s deck: %s' "${player_2_cards[0]}"; ((${#player_2_cards[@]} > 1)) && printf >&2 ', %s' "${player_2_cards[@]:1}"; printf >&2 '\n'
        round="${player_1_cards[*]}|${player_2_cards[*]}"
        if [[ -v previous_rounds[$round] ]]; then
            printf >&2 'Preventing infinite game...\n'
            printf >&2 'The winner of game %s is player 1!\n\n' "$current_game_number"
            winning_player_cards=("${player_1_cards[@]}")
            return 0;
        fi
        previous_rounds[$round]=
        local player_1_card=${player_1_cards[0]}
        local player_2_card=${player_2_cards[0]}
        player_1_cards=("${player_1_cards[@]:1}")
        player_2_cards=("${player_2_cards[@]:1}")
        printf >&2 'Player 1 plays: %s\n' "$player_1_card"
        printf >&2 'Player 2 plays: %s\n' "$player_2_card"
        if ((${#player_1_cards[@]} >= player_1_card && ${#player_2_cards[@]} >= player_2_card)); then
            printf >&2 'Playing a sub-game to determine the winner...\n\n'
            input_player_1_cards=("${player_1_cards[@]:0:$player_1_card}")
            input_player_2_cards=("${player_2_cards[@]:0:$player_2_card}")
            if play_recursive_combat; then
                printf >&2 '...anyway, back to game %d.\n' "$current_game_number"
                printf >&2 'Player 1 wins round %s of game %s!\n\n' "$current_round_number" "$current_game_number"
                player_1_cards+=("$player_1_card" "$player_2_card")
            else
                printf >&2 '...anyway, back to game %d.\n' "$current_game_number"
                printf >&2 'Player 2 wins round %s of game %s!\n\n' "$current_round_number" "$current_game_number"
                player_2_cards+=("$player_2_card" "$player_1_card")
            fi
        elif ((player_1_card > player_2_card)); then
            printf >&2 'Player 1 wins round %s of game %s!\n\n' "$current_round_number" "$current_game_number"
            player_1_cards+=("$player_1_card" "$player_2_card")
        else
            printf >&2 'Player 2 wins round %s of game %s!\n\n' "$current_round_number" "$current_game_number"
            player_2_cards+=("$player_2_card" "$player_1_card")
        fi
    done
    if ((${#player_1_cards[@]})); then
        printf >&2 'The winner of game %s is player 1!\n\n' "$current_game_number"
        winning_player_cards=("${player_1_cards[@]}")
        return 0;
    else
        printf >&2 'The winner of game %s is player 2!\n\n' "$current_game_number"
        winning_player_cards=("${player_2_cards[@]}")
        return 1;
    fi
}

function part2 {
    input_player_1_cards=("${original_player_1_cards[@]}")
    input_player_2_cards=("${original_player_2_cards[@]}")
    play_recursive_combat; local winner=$(($? + 1))
    printf >&2 '\n== Post-game results ==\n'
    case $winner in
        1)
            printf >&2 'Player 1’s deck: %s' "${winning_player_cards[0]}"; ((${#winning_player_cards[@]} > 1)) && printf >&2 ', %s' "${winning_player_cards[@]:1}"; printf >&2 '\n'
            printf >&2 'Player 2’s deck: \n'
            ;;
        2)
            printf >&2 'Player 1’s deck: \n'
            printf >&2 'Player 2’s deck: %s' "${winning_player_cards[0]}"; ((${#winning_player_cards[@]} > 1)) && printf >&2 ', %s' "${winning_player_cards[@]:1}"; printf >&2 '\n'
            ;;
        *) die 'unexpected winner: %s' "$winner";;
    esac
    winning_player_score
}

part1
part2
